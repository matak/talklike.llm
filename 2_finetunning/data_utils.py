import json
import os
from datetime import datetime

def load_model_data(file_path, debugger=None):
    """Naƒçte data z JSONL souboru nebo jednoho velk√©ho JSON objektu"""
    conversations = []
    
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read().strip()
    
    # Debug: Ulo≈æen√≠ p≈Øvodn√≠ho obsahu
    if debugger:
        debugger.save_step("01_original_content", {"content": content[:1000] + "..." if len(content) > 1000 else content}, 
                          "P≈Øvodn√≠ obsah souboru")
    
    try:
        # Zkus√≠me parsovat jako jeden velk√Ω JSON objekt
        data = json.loads(content)
        
        if 'messages' in data:
            # M√°me jeden velk√Ω objekt s messages - rozdƒõl√≠me na konverzace
            messages = data['messages']
            print(f"üìä Naƒçteno {len(messages)} zpr√°v v jednom objektu")
            
            # Debug: Ulo≈æen√≠ v≈°ech zpr√°v
            if debugger:
                debugger.save_step("02_all_messages", messages, f"V≈°ech {len(messages)} zpr√°v z JSON objektu")
            
            # Najdeme system zpr√°vu (mƒõla by b√Ωt prvn√≠)
            system_msg = None
            for msg in messages:
                if msg['role'] == 'system':
                    system_msg = msg
                    break
            
            if not system_msg:
                print("‚ùå Nenalezena system zpr√°va!")
                return conversations
            
            # Debug: Ulo≈æen√≠ system zpr√°vy
            if debugger:
                debugger.save_step("03_system_message", [system_msg], "System zpr√°va")
            
            # Projdeme v≈°echny zpr√°vy a najdeme user-assistant p√°ry
            i = 0
            while i < len(messages):
                # Hled√°me user zpr√°vu
                if i < len(messages) and messages[i]['role'] == 'user':
                    user_msg = messages[i]
                    i += 1
                    
                    # Hled√°me n√°sleduj√≠c√≠ assistant zpr√°vu
                    if i < len(messages) and messages[i]['role'] == 'assistant':
                        assistant_msg = messages[i]
                        i += 1
                        
                        # Vytvo≈ô√≠me konverzaci s system + user + assistant
                        conv_messages = [system_msg, user_msg, assistant_msg]
                        conversations.append({
                            "messages": conv_messages
                        })
                    else:
                        # Chyb√≠ assistant zpr√°va, p≈ôeskoƒç√≠me user zpr√°vu
                        i += 1
                else:
                    # Nen√≠ user zpr√°va, p≈ôeskoƒç√≠me
                    i += 1
            
            print(f"‚úÖ Vytvo≈ôeno {len(conversations)} konverzac√≠")
            
            # Debug: Ulo≈æen√≠ vytvo≈ôen√Ωch konverzac√≠
            if debugger:
                debugger.save_step("04_conversations", conversations, f"Vytvo≈ôen√Ωch {len(conversations)} konverzac√≠")
                if len(conversations) > 0:
                    debugger.save_sample("04_conversations", conversations[0], 0)
                    if len(conversations) > 1:
                        debugger.save_sample("04_conversations", conversations[1], 1)
            
            # Debug informace
            if len(conversations) > 0:
                print(f"üìù Uk√°zka prvn√≠ konverzace:")
                first_conv = conversations[0]
                for msg in first_conv['messages']:
                    print(f"  {msg['role']}: {msg['content'][:100]}...")
                
                if len(conversations) > 1:
                    print(f"üìù Uk√°zka druh√© konverzace:")
                    second_conv = conversations[1]
                    for msg in second_conv['messages']:
                        print(f"  {msg['role']}: {msg['content'][:100]}...")
            
            return conversations
            
    except json.JSONDecodeError:
        # Nen√≠ jeden velk√Ω JSON objekt, zkus√≠me JSONL form√°t
        print("üìä Zkou≈°√≠m JSONL form√°t...")
        with open(file_path, 'r', encoding='utf-8') as f:
            for line in f:
                if line.strip():
                    try:
                        data = json.loads(line)
                        conversations.append(data)
                    except json.JSONDecodeError as e:
                        print(f"‚ö†Ô∏è Chyba p≈ôi parsov√°n√≠ ≈ô√°dku: {e}")
                        continue
        
        print(f"‚úÖ Naƒçteno {len(conversations)} konverzac√≠ z JSONL")
        return conversations
    
    return conversations

def prepare_training_data(conversations, tokenizer, debugger=None):
    """P≈ôiprav√≠ data pro fine-tuning pomoc√≠ apply_chat_template"""
    if not hasattr(tokenizer, 'apply_chat_template'):
        raise RuntimeError("‚ùå Tokenizer nepodporuje apply_chat_template!")

    training_data = []

    if debugger:
        debugger.save_step("05_input_conversations", conversations, f"Vstupn√≠ch {len(conversations)} konverzac√≠")

    for i, conv in enumerate(conversations):
        messages = conv.get("messages", [])
        if not any(msg.get("role") == "assistant" for msg in messages):
            print(f"‚ö†Ô∏è P≈ôeskakuji konverzaci ƒç. {i} - neobsahuje assistant zpr√°vu")
            continue

        # Debug: Zobraz√≠me p≈Øvodn√≠ zpr√°vy p≈ôed apply_chat_template
        print(f"üîç Konverzace ƒç. {i} - p≈Øvodn√≠ zpr√°vy:")
        for j, msg in enumerate(messages):
            print(f"  {j}: {msg['role']}: {msg['content'][:100]}...")
        
        # Debug: Zkontrolujeme, zda obsahuje system message
        system_messages = [msg for msg in messages if msg.get("role") == "system"]
        if system_messages:
            print(f"  ‚úÖ Obsahuje {len(system_messages)} system zpr√°v")
        else:
            print(f"  ‚ùå Neobsahuje ≈æ√°dnou system zpr√°vu")

        try:
            formatted_text = tokenizer.apply_chat_template(
                messages,
                tokenize=False,
                add_generation_prompt=False
            )
            
            # Debug: Zobraz√≠me v√Ωsledek po apply_chat_template
            print(f"üîç Konverzace ƒç. {i} - po apply_chat_template:")
            print(f"  V√Ωsledek: {formatted_text[:200]}...")
            
            # Debug: Zkontrolujeme, zda system message z≈Østala v textu
            if system_messages:
                system_content = system_messages[0]['content']
                if system_content in formatted_text:
                    print(f"  ‚úÖ System message z≈Østala v textu")
                else:
                    print(f"  ‚ùå System message zmizela z textu!")
                    print(f"  System content: {system_content[:100]}...")
            
            training_data.append({"text": formatted_text})

            if debugger and i < 2:  # Ulo≈æ prvn√≠ dva vzorky
                debugger.save_sample(f"06_training_data", {"text": formatted_text}, i)

        except Exception as e:
            print(f"‚ùå Chyba p≈ôi form√°tov√°n√≠ konverzace ƒç. {i}: {e}")
            raise RuntimeError(f"‚ùå Chyba p≈ôi form√°tov√°n√≠ konverzace ƒç. {i}: {e}")
        
        print()  # Pr√°zdn√Ω ≈ô√°dek pro lep≈°√≠ ƒçitelnost

    if debugger:
        debugger.save_step("06_training_data", training_data, f"P≈ôipraveno {len(training_data)} tr√©novac√≠ch vzork≈Ø")
        debugger.save_sample("06_training_data_full", training_data)

    return training_data

def _add_system_to_user_messages(messages):
    """P≈ôid√° system message do user message pro Mistral"""
    modified_messages = []
    system_content = None
    
    # Najdeme system message
    for msg in messages:
        if msg['role'] == 'system':
            system_content = msg['content']
            break
    
    # Projdeme v≈°echny zpr√°vy a uprav√≠me user zpr√°vy
    for msg in messages:
        if msg['role'] == 'user':
            if system_content:
                # P≈ôid√°me system message na zaƒç√°tek user zpr√°vy
                combined_content = f"{system_content}\n\n{msg['content']}"
                modified_messages.append({
                    'role': 'user',
                    'content': combined_content
                })
            else:
                # ≈Ω√°dn√° system message, pou≈æijeme p≈Øvodn√≠
                modified_messages.append(msg)
        elif msg['role'] == 'assistant':
            # Assistant zpr√°vy z≈Øst√°vaj√≠ stejn√©
            modified_messages.append(msg)
        # System zpr√°vy p≈ôeskoƒç√≠me, proto≈æe je p≈ôid√°me do user zpr√°v
    
    return modified_messages 