import json
import os
from datetime import datetime

def load_babis_data(file_path, debugger=None):
    """Naƒçte data z JSONL souboru nebo jednoho velk√©ho JSON objektu"""
    conversations = []
    
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read().strip()
    
    # Debug: Ulo≈æen√≠ p≈Øvodn√≠ho obsahu
    if debugger:
        debugger.save_step("01_original_content", {"content": content[:1000] + "..." if len(content) > 1000 else content}, 
                          "P≈Øvodn√≠ obsah souboru")
    
    try:
        # Zkus√≠me parsovat jako jeden velk√Ω JSON objekt
        data = json.loads(content)
        
        if 'messages' in data:
            # M√°me jeden velk√Ω objekt s messages - rozdƒõl√≠me na konverzace
            messages = data['messages']
            print(f"üìä Naƒçteno {len(messages)} zpr√°v v jednom objektu")
            
            # Debug: Ulo≈æen√≠ v≈°ech zpr√°v
            if debugger:
                debugger.save_step("02_all_messages", messages, f"V≈°ech {len(messages)} zpr√°v z JSON objektu")
            
            # Najdeme system zpr√°vu (mƒõla by b√Ωt prvn√≠)
            system_msg = None
            for msg in messages:
                if msg['role'] == 'system':
                    system_msg = msg
                    break
            
            if not system_msg:
                print("‚ùå Nenalezena system zpr√°va!")
                return conversations
            
            # Debug: Ulo≈æen√≠ system zpr√°vy
            if debugger:
                debugger.save_step("03_system_message", [system_msg], "System zpr√°va")
            
            # Projdeme v≈°echny zpr√°vy a najdeme user-assistant p√°ry
            i = 0
            while i < len(messages):
                # Hled√°me user zpr√°vu
                if i < len(messages) and messages[i]['role'] == 'user':
                    user_msg = messages[i]
                    i += 1
                    
                    # Hled√°me n√°sleduj√≠c√≠ assistant zpr√°vu
                    if i < len(messages) and messages[i]['role'] == 'assistant':
                        assistant_msg = messages[i]
                        i += 1
                        
                        # Vytvo≈ô√≠me konverzaci s system + user + assistant
                        conv_messages = [system_msg, user_msg, assistant_msg]
                        conversations.append({
                            "messages": conv_messages
                        })
                    else:
                        # Chyb√≠ assistant zpr√°va, p≈ôeskoƒç√≠me user zpr√°vu
                        i += 1
                else:
                    # Nen√≠ user zpr√°va, p≈ôeskoƒç√≠me
                    i += 1
            
            print(f"‚úÖ Vytvo≈ôeno {len(conversations)} konverzac√≠")
            
            # Debug: Ulo≈æen√≠ vytvo≈ôen√Ωch konverzac√≠
            if debugger:
                debugger.save_step("04_conversations", conversations, f"Vytvo≈ôen√Ωch {len(conversations)} konverzac√≠")
                if len(conversations) > 0:
                    debugger.save_sample("04_conversations", conversations[0], 0)
                    if len(conversations) > 1:
                        debugger.save_sample("04_conversations", conversations[1], 1)
            
            # Debug informace
            if len(conversations) > 0:
                print(f"üìù Uk√°zka prvn√≠ konverzace:")
                first_conv = conversations[0]
                for msg in first_conv['messages']:
                    print(f"  {msg['role']}: {msg['content'][:100]}...")
                
                if len(conversations) > 1:
                    print(f"üìù Uk√°zka druh√© konverzace:")
                    second_conv = conversations[1]
                    for msg in second_conv['messages']:
                        print(f"  {msg['role']}: {msg['content'][:100]}...")
            
            return conversations
            
    except json.JSONDecodeError:
        # Nen√≠ jeden velk√Ω JSON objekt, zkus√≠me JSONL form√°t
        print("üìä Zkou≈°√≠m JSONL form√°t...")
        with open(file_path, 'r', encoding='utf-8') as f:
            for line in f:
                if line.strip():
                    try:
                        data = json.loads(line)
                        conversations.append(data)
                    except json.JSONDecodeError as e:
                        print(f"‚ö†Ô∏è Chyba p≈ôi parsov√°n√≠ ≈ô√°dku: {e}")
                        continue
        
        print(f"‚úÖ Naƒçteno {len(conversations)} konverzac√≠ z JSONL")
        return conversations
    
    return conversations

def prepare_training_data(conversations, debugger=None, model_name="microsoft/DialoGPT-medium"):
    """P≈ôiprav√≠ data pro fine-tuning"""
    training_data = []
    
    # Debug: Ulo≈æen√≠ vstupn√≠ch konverzac√≠
    if debugger:
        debugger.save_step("05_input_conversations", conversations, f"Vstupn√≠ch {len(conversations)} konverzac√≠ pro prepare_training_data")
    
    # Detekce typu modelu pro spr√°vn√Ω form√°t
    is_mistral = "mistral" in model_name.lower()
    is_llama = "llama" in model_name.lower()
    is_dialogpt = "dialogpt" in model_name.lower()
    
    print(f"üîß Detekov√°n model typ: {'Mistral' if is_mistral else 'Llama' if is_llama else 'DialoGPT' if is_dialogpt else 'Unknown'}")
    
    for conv in conversations:
        messages = conv['messages']
        
        # P≈ôeskoƒç√≠me konverzace bez assistant zpr√°v
        if not any(msg['role'] == 'assistant' for msg in messages):
            continue
            
        # Vytvo≈ô√≠me text pro fine-tuning podle typu modelu
        text = ""
        
        if is_mistral:
            # Mistral pou≈æ√≠v√° ChatML form√°t
            for msg in messages:
                if msg['role'] == 'system':
                    text += f"<s>[INST] {msg['content']} [/INST]"
                elif msg['role'] == 'user':
                    text += f"<s>[INST] {msg['content']} [/INST]"
                elif msg['role'] == 'assistant':
                    text += f" {msg['content']} </s>"
        elif is_llama:
            # Llama pou≈æ√≠v√° podobn√Ω form√°t jako Mistral
            for msg in messages:
                if msg['role'] == 'system':
                    text += f"<s>[INST] <<SYS>>\n{msg['content']}\n<</SYS>>\n\n [/INST]"
                elif msg['role'] == 'user':
                    text += f"<s>[INST] {msg['content']} [/INST]"
                elif msg['role'] == 'assistant':
                    text += f" {msg['content']} </s>"
        else:
            # DialoGPT a jin√© modely - p≈Øvodn√≠ form√°t
            for msg in messages:
                if msg['role'] == 'system':
                    text += f"<|system|>\n{msg['content']}<|end|>\n"
                elif msg['role'] == 'user':
                    text += f"<|user|>\n{msg['content']}<|end|>\n"
                elif msg['role'] == 'assistant':
                    text += f"<|assistant|>\n{msg['content']}<|end|>\n"
        
        training_data.append({"text": text})
    
    # Debug: Ulo≈æen√≠ p≈ôipraven√Ωch dat
    if debugger:
        debugger.save_step("06_training_data", training_data, f"P≈ôipraven√Ωch {len(training_data)} tr√©novac√≠ch vzork≈Ø pro {model_name}")
        if len(training_data) > 0:
            debugger.save_sample("06_training_data", training_data[0], 0)
            if len(training_data) > 1:
                debugger.save_sample("06_training_data", training_data[1], 1)
    
    return training_data 